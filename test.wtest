import aprobacion.*
import carrera.*
import estudiante.*
import gestores.*
import materia.*

describe "funcionalidades de la universidad" {

    const medicina = new Carrera()
    const quimica = new Materia(carrera=medicina)
    const biologia1 = new Materia(carrera=medicina)
    const biologia2 = new Materia(carrera=medicina, prerrequisitos=#{biologia1})
    const anatomiaGeneral = new Materia(carrera=medicina)
    const derecho = new Carrera()
    const latin = new Materia(carrera=derecho)
    const derechoRomano = new Materia(carrera=derecho)
    const historiaDelDerechoArgentino = new Materia(carrera=derecho)
    const derechoPenal1 = new Materia(carrera=derecho)
    const derechoPenal2 = new Materia(carrera=derecho, prerrequisitos=#{derechoPenal1})
    const programacion = new Carrera()
    const progObjetos1 = new Materia(carrera=programacion)
    const progObjetos2 = new Materia(carrera=programacion, prerrequisitos=#{progObjetos1, matematica1}, maximoEstudiantes = 3)
    const progObjetos3 = new Materia(carrera=programacion, prerrequisitos=#{progObjetos2, basesDeDatos})
    const elementosDeProgramacion = new Materia(carrera=programacion)
    const basesDeDatos = new Materia(carrera=programacion)
    const matematica1 = new Materia(carrera=programacion)
    const programacionConcurrente = new Materia(carrera=programacion, prerrequisitos=#{progObjetos1, basesDeDatos})
    const trabajoFinal = new Materia(carrera=programacion, prerrequisitos=#{progObjetos1, progObjetos2, progObjetos3, 
    elementosDeProgramacion, basesDeDatos, matematica1, programacionConcurrente})
    const roque = new Estudiante(carrerasCursando = #{programacion, medicina})
    const luisa = new Estudiante(carrerasCursando = #{programacion})
    const romina = new Estudiante(carrerasCursando = #{programacion})
    const alicia = new Estudiante(carrerasCursando = #{programacion})
    const ana = new Estudiante(carrerasCursando = #{programacion})

    method initialize() {
        medicina.materias(#{quimica, biologia1, biologia2, anatomiaGeneral})
        derecho.materias(#{latin, derechoRomano, historiaDelDerechoArgentino, derechoPenal1, derechoPenal2})
        programacion.materias(#{progObjetos1, progObjetos2, progObjetos3, elementosDeProgramacion, basesDeDatos,
        matematica1, programacionConcurrente, trabajoFinal})

        roque.inscribirseA(elementosDeProgramacion)
        roque.registrarMateriaAprobada(elementosDeProgramacion, 7)
        roque.inscribirseA(matematica1)
        roque.registrarMateriaAprobada(matematica1, 4)
        roque.inscribirseA(progObjetos1)
        roque.registrarMateriaAprobada(progObjetos1, 7)
        roque.inscribirseA(basesDeDatos)
        roque.registrarMateriaAprobada(basesDeDatos, 6)
        roque.inscribirseA(quimica)
        roque.registrarMateriaAprobada(quimica, 7)
        roque.inscribirseA(biologia1)
        roque.registrarMateriaAprobada(biologia1, 7)

        luisa.inscribirseA(elementosDeProgramacion)
        luisa.registrarMateriaAprobada(elementosDeProgramacion, 7)
        luisa.inscribirseA(progObjetos1)
        luisa.registrarMateriaAprobada(progObjetos1, 7)
        luisa.inscribirseA(matematica1)
        luisa.registrarMateriaAprobada(matematica1, 7)

        romina.inscribirseA(elementosDeProgramacion)
        romina.registrarMateriaAprobada(elementosDeProgramacion, 5)
        romina.inscribirseA(progObjetos1)
        romina.registrarMateriaAprobada(progObjetos1, 5)
        romina.inscribirseA(matematica1)
        romina.registrarMateriaAprobada(matematica1, 5)

        alicia.inscribirseA(elementosDeProgramacion)
        alicia.registrarMateriaAprobada(elementosDeProgramacion, 6)
        alicia.inscribirseA(progObjetos1)
        alicia.registrarMateriaAprobada(progObjetos1, 6)
        alicia.inscribirseA(matematica1)
        alicia.registrarMateriaAprobada(matematica1, 6)

        ana.inscribirseA(elementosDeProgramacion)
        ana.registrarMateriaAprobada(elementosDeProgramacion, 7)
    }
   
   test "funcionalidades básicas de roque y registrar aprobaciones" {
    assert.equals(#{programacion, medicina}, roque.carrerasCursando())
    assert.equals(6, roque.materiasAprobadas().size())
    assert.throwsException({roque.registrarMateriaAprobada(progObjetos2, 3)}) //no está inscrito 
    assert.throwsException({roque.inscribirseA(basesDeDatos)}) //ya la tiene aprobada
    assert.doesNotThrowException({roque.inscribirseA(progObjetos2)}) 
    assert.throwsException({roque.registrarMateriaAprobada(progObjetos2, 3)}) //no es nota aprobatoria
    assert.throwsException({roque.registrarMateriaAprobada(progObjetos2, 11)}) //no es nota aprobatoria
    assert.doesNotThrowException({roque.registrarMateriaAprobada(progObjetos2, 4)})
    assert.equals(7, roque.materiasAprobadas().size())
    assert.that(roque.tieneAprobada(progObjetos2))
    assert.equals(6, roque.promedio())
    assert.throwsException({roque.registrarMateriaAprobada(progObjetos2, 5)}) //tira error porque ya la aprobó y no la está cursando más
    assert.equals(#{quimica, biologia1, biologia2, anatomiaGeneral, progObjetos1, progObjetos2, progObjetos3, 
                    elementosDeProgramacion, basesDeDatos, matematica1, programacionConcurrente, trabajoFinal},
                    roque.todasLasMateriasDeSusCarreras())
    assert.equals(7, roque.materiasAprobadas().size())
   }

   test "inscripciones 1" {
    assert.notThat(roque.puedeInscribirseA(derechoRomano)) //no hay coincidencia con las carreras de roque
    assert.notThat(roque.puedeInscribirseA(progObjetos1)) //ya la tiene aprobada
    assert.notThat(roque.puedeInscribirseA(progObjetos3)) //no cumple los prerrequisitos
    assert.that(roque.puedeInscribirseA(progObjetos2))
    roque.inscribirseA(progObjetos2)
    assert.notThat(roque.puedeInscribirseA(progObjetos2)) //ya la está cursando
    roque.registrarMateriaAprobada(progObjetos2, 8)
    assert.that(roque.puedeInscribirseA(progObjetos3))
    assert.equals(7, roque.materiasAprobadas().size())
   }

   test "inscripciones 2 (correlatividades)" {
    assert.that(roque.puedeInscribirseA(progObjetos2))
    assert.that(roque.puedeInscribirseA(programacionConcurrente))
    assert.that(roque.puedeInscribirseA(biologia2))
   }

   test "inscripciones 3 (lista de espera)" { //recordar que el máximo de estudiantes para progObjetos2 es de 3 (los otros inscritos irán a lista de espera)
    assert.that(luisa.puedeInscribirseA(progObjetos2)) 
    luisa.inscribirseA(progObjetos2)
    assert.that(romina.puedeInscribirseA(progObjetos2)) 
    romina.inscribirseA(progObjetos2)
    assert.that(alicia.puedeInscribirseA(progObjetos2)) 
    alicia.inscribirseA(progObjetos2)
    assert.that(roque.puedeInscribirseA(progObjetos2)) //roque no queda efectivamente inscrito y va a la lista de espera
    roque.inscribirseA(progObjetos2)
    assert.equals(3, progObjetos2.alumnosCursando().size())
    assert.that(luisa.estaEfectivamenteCursando(progObjetos2))
    assert.that(romina.estaEfectivamenteCursando(progObjetos2))
    assert.that(alicia.estaEfectivamenteCursando(progObjetos2))
    assert.equals([roque], progObjetos2.listaDeEspera())
    assert.notThat(roque.estaEfectivamenteCursando(progObjetos2))
    assert.that(roque.estaEnListaDeEspera(progObjetos2))
    //SI SE DA DE BAJA ROMINA:
    assert.doesNotThrowException({romina.darseDeBajaEn(progObjetos2)})
    assert.notThat(romina.estaEfectivamenteCursando(progObjetos2))
    assert.equals(3, progObjetos2.alumnosCursando().size()) //sigue siendo 3 porque ahora entró roque que estaba en lista de espera
    assert.equals([], progObjetos2.listaDeEspera())
    assert.that(roque.estaEfectivamenteCursando(progObjetos2))
    assert.notThat(roque.estaEnListaDeEspera(progObjetos2))
   }

}